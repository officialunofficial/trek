name: Publish to crates.io

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Perform a dry run (no actual publish)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  CARGO_TERM_COLOR: always

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --all-features

      - name: Check if version exists on crates.io
        id: check_version
        run: |
          CRATE_NAME=$(grep '^name' Cargo.toml | head -1 | cut -d'"' -f2)
          CRATE_VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
          
          # Check if crate exists
          if ! cargo search "${CRATE_NAME}" --limit 1 | grep -q "^${CRATE_NAME} "; then
            echo "Crate ${CRATE_NAME} does not exist on crates.io yet"
            echo "version_exists=false" >> $GITHUB_OUTPUT
          else
            # Check specific version
            PUBLISHED_VERSION=$(cargo search "${CRATE_NAME}" --limit 1 | grep "^${CRATE_NAME} " | cut -d'"' -f2)
            if [ "${PUBLISHED_VERSION}" = "${CRATE_VERSION}" ]; then
              echo "Version ${CRATE_VERSION} already exists on crates.io"
              echo "version_exists=true" >> $GITHUB_OUTPUT
            else
              echo "Version ${CRATE_VERSION} does not exist on crates.io (published: ${PUBLISHED_VERSION})"
              echo "version_exists=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Publish to crates.io (dry run)
        if: github.event.inputs.dry_run == 'true'
        run: |
          cargo publish --dry-run --allow-dirty

      - name: Publish to crates.io
        if: steps.check_version.outputs.version_exists == 'false' && github.event.inputs.dry_run != 'true'
        run: |
          cargo publish --token ${{ secrets.CRATES_PACKAGE_KEY }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_PACKAGE_KEY }}

      - name: Wait for crates.io to index
        if: steps.check_version.outputs.version_exists == 'false' && github.event.inputs.dry_run != 'true'
        run: |
          echo "Waiting for crates.io to index the new version..."
          sleep 30

      - name: Verify publication
        if: steps.check_version.outputs.version_exists == 'false' && github.event.inputs.dry_run != 'true'
        run: |
          CRATE_NAME=$(grep '^name' Cargo.toml | head -1 | cut -d'"' -f2)
          CRATE_VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
          
          # Try to find the published version
          for i in {1..6}; do
            if cargo search "${CRATE_NAME}" --limit 1 | grep -q "\"${CRATE_VERSION}\""; then
              echo "✅ Successfully published ${CRATE_NAME} v${CRATE_VERSION} to crates.io"
              exit 0
            fi
            echo "Waiting for crates.io to update search index... (attempt $i/6)"
            sleep 10
          done
          
          echo "⚠️  Could not verify publication in search index, but it may still be successful"
          echo "Check https://crates.io/crates/${CRATE_NAME}